CRUD OPERATIONS ON ALL TABLES EXCEPT LOG
CLUB LOG IS READ ONLY

Club assigning option - assign for:
- all students
- all unassigned students
- specific student
- specific day
- all days



// returns names of students in order of ID (when asking for specific student, make int they have to input to choose student = person.id OR rowID of query
SELECT Person.Name FROM Student, Person WHERE Student.PersonID = Person.PersonID ORDER BY Person.PersonID ASC

// returns names of teachers
SELECT Person.Name FROM Teacher, Person WHERE Teacher.PersonID = Person.PersonID

// select all unnasigned students
Select Person.Name FROM Person
INNER JOIN Student ON Student.PersonID = Person.PersonID
WHERE Student.isAssigned = 0;

// unassigned all students
UPDATE Student
SET isAssigned = 0
WHERE Student.isAssigned = 1

// number of unassigned students?
Select DISTINCT Count(*) FROM Person
INNER JOIN Student ON Student.PersonID = Person.PersonID
WHERE Student.isAssigned = 0;


// make a view of a specific students attendance
CREATE VIEW StudentLog AS

SELECT Person.Name, ClubLog.Timestamp, ClubLog.Date, Club.ClubName, Club.StartTime,
((strftime('%s', Club.StartTime) - strftime('%s', ClubLog.Timestamp)) * 1.0) / 60 AS time_delta
FROM ClubLog

INNER JOIN Student ON Student.StudentID = ClubLog.StudentID
INNER JOIN Person ON Student.PersonID = Person.PersonID
INNER JOIN Club ON ClubLog.ClubID = Club.ClubID

WHERE Student.StudentID = 2

// using student attendance view, show all lates
SELECT StudentLog.Name, StudentLog.Timestamp, StudentLog.Date, StudentLog.ClubName, StudentLog.StartTime
FROM StudentLog WHERE StudentLog.time_delta > 5


// using student attendance view, show num of lates
SELECT COUNT(*) AS lates
FROM StudentLog WHERE StudentLog.time_delta > 5


// students with most attendance of clubs
SELECT Person.Name
FROM ClubLog

INNER JOIN Student ON Student.StudentID = ClubLog.StudentID
INNER JOIN Person ON Student.PersonID = Person.PersonID

GROUP BY ClubLog.StudentID ORDER BY COUNT(*) DESC LIMIT 1


// get student's subjects to feed into Dijkstra
SELECT Subjects.SubjectName FROM Subjects
INNER JOIN StudentSubjects ON StudentSubjects.SubjectID = Subjects.SubjectID
INNER JOIN Student ON StudentSubjects.StudentID = Student.StudentID
INNER JOIN Person ON Student.PersonID = Person.PersonID
WHERE Person.Name = 'Antonussaltassussy'


https://www.sqlitetutorial.net/sqlite-distinct/
SELECT DISTINCT ensures no duplicate values

https://www.sqlitetutorial.net/sqlite-glob/
GLOB is case sensitive regex using UNIX wildcards

https://www.sqlitetutorial.net/sqlite-having/
https://stackoverflow.com/a/9253267
HAVING vs WHERE

https://www.sqlitetutorial.net/sqlite-intersect/
https://stackoverflow.com/a/51775740
INTERSECT VS INNER JOIN
inner join = duplicates

https://www.sqlitetutorial.net/sqlite-exists/
does a subquery return any row
eg: are there any unassigned students

reverse engineer import csv to allow for backups

TO LOOP THROUGH RESULTS SET:
while (rs.next()) {
                System.out.println(rs.getInt("id") +  "\t" + 
                                   rs.getString("name") + "\t" +
                                   rs.getDouble("capacity"));

//
CREATE VIEW IF NOT EXISTS Attendance AS

SELECT Person.PersonName, ClubLog.Timestamp, ClubLog.Date, Club.ClubName, Club.StartTime,
((strftime('%s', Club.StartTime) - strftime('%s', ClubLog.Timestamp)) * 1.0) / 60 AS time_delta
FROM ClubLog

INNER JOIN Student ON Student.StudentID = ClubLog.StudentID
INNER JOIN Person ON Student.PersonID = Person.PersonID
INNER JOIN Club ON ClubLog.ClubID = Club.ClubID

// DROP VIEW IF EXISTS Attendance